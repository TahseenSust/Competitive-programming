#include<bits/stdc++.h>
using namespace std;

#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);
#define endl '\n'

typedef long long ll;
typedef pair<int,int> pii;
const ll inf=(1ll)<<60;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;

typedef tree<pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> ost;


// direction array
int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};

// Bitmask

/*
bool check(int mask,int pos){return mask&(1<<pos);}
int SET(int mask,int pos){return mask|(1<<pos);}
int FLIP(int mask,int pos){return mask^(1<<pos);}
*/

int n,arr[100005],nxt[100005];
int brr[100005];

#define mid (b+e)/2

const int sz=100005,oo=1<<30;

ost mst[sz*4];

int ara[sz],q,k=1;

void combine(int node,int left,int right)
{
	for(auto x:mst[left]){
		mst[node].insert({x.first,k++});
	}

	for(auto x:mst[right]){
		mst[node].insert({x.first,k++});
	}
}

void build(int node,int b,int e)
{
	if(b==e){
		mst[node].insert({ara[b],k++});
		return;
	}
	build(node*2,b,mid);
	build(node*2+1,mid+1,e);
	combine(node,node*2,node*2+1);
}

int query(int node,int b,int e,int l,int r,int val)
{
	if(b>r || e<l) return 0;

	if(b>=l && e<=r){
		return mst[node].order_of_key({val+1,0});
	}
	return query(node*2,b,mid,l,r,val)+query(node*2+1,mid+1,e,l,r,val);
}


int main()
{
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>arr[i];
        nxt[i]=oo;
    }
    for(int i=n;i>=1;i--){
        ara[i]=nxt[arr[i]];
        nxt[arr[i]]=i;
    }

    build(1,1,n);

    cin>>q;

    while(q--){
        int l,r;
        cin>>l>>r;
        cout<<(r-l+1)-query(1,1,n,l,r,r)<<endl;
    }
}
