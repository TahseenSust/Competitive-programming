#include<bits/stdc++.h>
using namespace std;

#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);
#define endl '\n'

typedef long long ll;
typedef pair<int,int> pii;
/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ost; // set
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_multiset; // multiset
*/

// Bitmask

bool check(int mask,int pos){return mask&(1<<pos);}
int SET(int mask,int pos){return mask|(1<<pos);}
int FLIP(int mask,int pos){return mask^(1<<pos);}




int m,n;
string obj[150];

int cal(int mask1,int mask2)
{
    int cnt=0;
    bool flag[150];
    memset(flag,true,sizeof flag);
    for(int i=0;i<m;i++){
        if(check(mask1,i)){
            for(int j=0;j<n;j++){
                if(obj[j][i]-'0'==check(mask2,i)){
                    flag[j]&=1;
                }else{
                    flag[j]=0;
                }
            }
        }
    }
    for(int i=0;i<n;i++) cnt+=flag[i];
    return cnt;
}

int dp[(1<<11)+5][(1<<11)+5];

int solve(int mask1,int mask2)
{
    int cnt=cal(mask1,mask2);
    if(__builtin_popcount(mask1) && cnt==0) return 100000;
    if(cnt==1) return 0;
    int &re=dp[mask1][mask2];
    if(re!=-1) return re;
    re=10000;
    for(int i=0;i<m;i++){
        if(check(mask1,i)) continue;
        int tmp=mask1;
        re=min(re,1+max(solve(SET(mask1,i),SET(mask2,i)),solve(SET(mask1,i),mask2)));
    }
    return re;
}


int main()
{
    FAST
    while(cin>>m>>n && n && m){
        for(int i=0;i<n;i++){
            cin>>obj[i];
        }
        memset(dp,-1,sizeof dp);
        cout<<solve(0,0)<<endl;
    }
}
