#include<bits/stdc++.h>
using namespace std;

struct FlowEdge {
    int v, u;
    long long cap, flow = 0;
    FlowEdge(int v, int u, long long cap) : v(v), u(u), cap(cap) {}
};

struct Dinic {
    const long long flow_inf = 1e18;
    vector<FlowEdge> edges;
    vector<vector<int>> adj;
    int n, m = 0;
    int s, t;
    vector<int> level, ptr;
    queue<int> q;

    Dinic(int n, int s, int t) : n(n), s(s), t(t) {
        adj.resize(n);
        level.resize(n);
        ptr.resize(n);
    }

    void add_edge(int v, int u, long long cap) {
        edges.emplace_back(v, u, cap);
        edges.emplace_back(u, v, 0);
        adj[v].push_back(m);
        adj[u].push_back(m + 1);
        m += 2;
    }

    bool bfs() {
        while (!q.empty()) {
            int v = q.front();
            q.pop();
            for (int id : adj[v]) {
                if (edges[id].cap - edges[id].flow < 1)
                    continue;
                if (level[edges[id].u] != -1)
                    continue;
                level[edges[id].u] = level[v] + 1;
                q.push(edges[id].u);
            }
        }
        return level[t] != -1;
    }

    long long dfs(int v, long long pushed) {
        if (pushed == 0)
            return 0;
        if (v == t)
            return pushed;
        for (int& cid = ptr[v]; cid < (int)adj[v].size(); cid++) {
            int id = adj[v][cid];
            int u = edges[id].u;
            if (level[v] + 1 != level[u] || edges[id].cap - edges[id].flow < 1)
                continue;
            long long tr = dfs(u, min(pushed, edges[id].cap - edges[id].flow));
            if (tr == 0)
                continue;
            edges[id].flow += tr;
            edges[id ^ 1].flow -= tr;
            return tr;
        }
        return 0;
    }

    long long flow() {
        long long f = 0;
        while (true) {
            fill(level.begin(), level.end(), -1);
            level[s] = 0;
            q.push(s);
            if (!bfs())
                break;
            fill(ptr.begin(), ptr.end(), 0);
            while (long long pushed = dfs(s, flow_inf)) {
                f += pushed;
            }
        }
        return f;
    }
};

double dis(double x1,double y1,double x2,double y2)
{
    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
}


int main()
{
    int n,m,k,t;

    cin>>t;

    for(int tc=1;tc<=t;tc++){

        cin>>n>>m>>k;

        pair<double,double>cor1[52],cor2[52];

        for(int i=0;i<n;i++) cin>>cor1[i].first>>cor1[i].second;
        for(int i=0;i<m;i++) cin>>cor2[i].first>>cor2[i].second;

        double lo=0,hi=1000,ans=-1;

        for(int it=0;it<100;it++){
            double mid=(lo+hi)/2.0;
            Dinic flow(n+m+5,0,n+m+2);
            for(int i=0;i<n;i++){
                for(int j=0;j<m;j++){
                    if(dis(cor1[i].first,cor1[i].second,cor2[j].first,cor2[j].second)<=mid){
                        //cout<<i<<' '<<j<<endl;
                        flow.add_edge(i+1,n+j+1,1);
                    }
                }
            }
            for(int i=1;i<=n;i++) flow.add_edge(0,i,1);
            for(int i=0;i<m;i++) flow.add_edge(n+i+1,n+m+2,1);
            //cout<<flow.flow()<<endl;
            if(flow.flow()>=n-k){
                ans=mid;
                hi=mid;
            }else{
                lo=mid;
            }
        }

        printf("Case #%d:\n",tc);
        if(ans!=-1) printf("%.3f\n\n",ans);
        else printf("Too bad.\n\n");
    }
}
