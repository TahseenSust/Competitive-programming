#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int MX=100005;


int tree[MX*4];

int ara[MX];



void build(int node,int b,int e)
{
    if(b==e){
        tree[node]=ara[b];
        return;
    }
    int lft=2*node,rght=node*2+1,mid=(b+e)/2;

    build(lft,b,mid);
    build(rght,mid+1,e);

    tree[node]=max(tree[lft],tree[rght]);

}

int query(int node,int b,int e,int l,int r)
{
    if(b>r || e<l){
        return INT_MIN;
    }
    if(b>=l && e<=r){
        return tree[node];
    }
    int mid=(b+e)/2;
    int p1=query(node*2,b,mid,l,r);
    int p2=query(node*2+1,mid+1,e,l,r);
    return max(p1,p2);
}

int main()
{
    //freopen("uva.txt","w",stdout);
    int n,x,k=0,q,l,r;

    while(cin>>n && n!=0){
        k=0;
        cin>>q;
        map<int,int>mp;
        map<int,int>fre;
        map<int,int>start;
        map<int,int>ses;
        vector<int>V;

        for(int i=1;i<=n;i++){
            cin>>x;

            if(mp.find(x)==mp.end()){
                ses[k]=i-1;

                k++;
                mp[x]=k;
                start[k]=i;

            }
            V.push_back(k);
            fre[k]++;


        }
        ses[k]=n;

        for(int i=0;i<n;i++){
            ara[i+1]=fre[V[i]];
        }
        build(1,1,n);

        while(q--){
            cin>>l>>r;
            int ans=0;
            if(V[l-1]==V[r-1]){
                ans=r-l+1;
            }else{
                if(start[V[l-1]]!=l){
                    ans=max(ans,(ses[V[l-1]]-l+1));
                    //cout<<V[l-1]<<endl;
                    //cout<<ses[V[l-1]]<<endl;
                    l=ses[V[l-1]]+1;
                }
                if(ses[V[r-1]]!=r){

                    ans=max(ans,(r-start[V[r-1]]+1));
                    r=start[V[r-1]]-1;
                }

                ans=max(ans,query(1,1,n,l,r));
            }

            cout<<ans<<endl;

        }
    }
}
