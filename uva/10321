#include<bits/stdc++.h>
using namespace std;

#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);
#define endl '\n'

const double EPS = 1e-9;


typedef long long ll;
typedef pair<int,int> pii;
/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ost; // set
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_multiset; // multiset
*/

// Bitmask

/*
bool check(int mask,int pos){return mask&(1<<pos);}
int SET(int mask,int pos){return mask|(1<<pos);}
int FLIP(int mask,int pos){return mask^(1<<pos);}
*/

struct PT
{
    double x, y;
    PT() {}
    PT(double x, double y) : x(x), y(y) {}
    PT(const PT &p) : x(p.x), y(p.y)    {}
    PT operator + (const PT &p)  const
    {
        return PT(x+p.x, y+p.y);
    }
    PT operator - (const PT &p)  const
    {
        return PT(x-p.x, y-p.y);
    }
    PT operator * (double c)     const
    {
        return PT(x*c,   y*c  );
    }
    PT operator / (double c)     const
    {
        return PT(x/c,   y/c  );
    }
    bool friend operator < (PT a,PT b)
    {
        if(a.x==b.x) return a.y<b.y;
        return a.x<b.x;
    }
};

double cross(PT a, PT b)
{
    return a.x * b.y - a.y * b.x;
}

double dot(PT p, PT q)
{
    return p.x*q.x+p.y*q.y;
}
double dist2(PT p, PT q)
{
    return dot(p-q,p-q);
}

bool LinesParallel(PT a, PT b, PT c, PT d)
{
    return fabs(cross(b-a, c-d)) < EPS;
}

bool LinesCollinear(PT a, PT b, PT c, PT d)
{
    return LinesParallel(a, b, c, d)
           && fabs(cross(a-b, a-c)) < EPS
           && fabs(cross(c-d, c-a)) < EPS;
}

bool SegmentsIntersect(PT a, PT b, PT c, PT d)
{
    if (LinesCollinear(a, b, c, d))
    {
        if (dist2(a, c) < EPS || dist2(a, d) < EPS ||
                dist2(b, c) < EPS || dist2(b, d) < EPS) return true;
        if (dot(c-a, c-b) > 0 && dot(d-a, d-b) > 0 && dot(c-b, d-b) > 0)
            return false;
        return true;
    }
    if (cross(d-a, b-a) * cross(c-a, b-a) > 0) return false;
    if (cross(a-c, d-c) * cross(b-c, d-c) > 0) return false;
    return true;
}

PT ComputeLineIntersection(PT a, PT b, PT c, PT d)
{
    double a1=a.y-b.y;
    double b1=b.x-a.x;
    double c1=cross(a, b);
    double a2=c.y-d.y;
    double b2=d.x-c.x;
    double c2=cross(c, d);
    double D=a1*b2-a2*b1;

    return PT((b1*c2-b2*c1)/D, (c1*a2-c2*a1)/D);
}

bool PointInPolygon(const vector<PT> &p, PT q)
{
    bool c = 0;
    int s=p.size();
    for (int i = 0,j=s-1; i < s; j=i++)
    {
        if ( ( (p[i].y > q.y) != (p[j].y > q.y ) ) &&
                (q.x < p[i].x + (p[j].x - p[i].x) * (q.y - p[i].y) / (p[j].y - p[i].y)))
            c = !c;
    }
    return c;
}


int main()
{
    FAST
    int n,m;
    while(cin>>n && n>=3){
        vector<PT>a,b;
        for(int i=0;i<n;i++){
            double x,y;
            cin>>x>>y;
            a.push_back(PT(x,y));
        }
        a.push_back(a[0]);
        cin>>m;
        for(int i=0;i<m;i++){
            double x,y;
            cin>>x>>y;
            b.push_back(PT(x,y));
        }
        b.push_back(b[0]);
        set<PT>ans;

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(SegmentsIntersect(a[i],a[i+1],b[j],b[j+1])){
                    ans.insert(ComputeLineIntersection(a[i],a[i+1],b[j],b[j+1]));
                }
                if(PointInPolygon(a,b[j])){
                    ans.insert(b[j]);
                }
            }
            if(PointInPolygon(b,a[i])){
                ans.insert(a[i]);
            }
        }
        cout<<ans.size()<<endl;
        for(auto p:ans){
            cout<<setprecision(2)<<fixed<<p.x<<' '<<p.y<<endl;
        }
    }
}
