#include<bits/stdc++.h>
using namespace std;

#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);
#define endl '\n'

typedef long long ll;
typedef pair<int,int> pii;
/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ost; // set
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_multiset; // multiset
*/

// Bitmask

/*
bool check(int mask,int pos){return mask&(1<<pos);}
int SET(int mask,int pos){return mask|(1<<pos);}
int FLIP(int mask,int pos){return mask^(1<<pos);}
*/

string add(string str1, string str2)
{
    if (str1.length() > str2.length())
        swap(str1, str2);
    string str = "";

    int n1 = str1.length(), n2 = str2.length();
    reverse(str1.begin(), str1.end());
    reverse(str2.begin(), str2.end());

    int carry = 0;
    for (int i=0; i<n1; i++)
    {
        int sum = ((str1[i]-'0')+(str2[i]-'0')+carry);
        str.push_back(sum%10 + '0');
        carry = sum/10;
    }
    for (int i=n1; i<n2; i++)
    {
        int sum = ((str2[i]-'0')+carry);
        str.push_back(sum%10 + '0');
        carry = sum/10;
    }
    if (carry)
        str.push_back(carry+'0');
    reverse(str.begin(), str.end());
    return str;
}

struct data
{
    int tree[12];
    int complete;
}trie[3567705+10];

string text;

int tot_node=1;

void Insert_trie(int flag)
{
    int node=1;
    for(int i=0;i<min((int)text.size(),40);i++){
        int id=(int) (text[i]-'0');
        if(trie[node].tree[id]==-1){
            trie[node].tree[id]=++tot_node;
        }
        node=trie[node].tree[id];
        if(trie[node].complete==-1){
            trie[node].complete=flag;
        }
    }
}

string fibo[100005];

void pre_cal()
{
    memset(trie,-1,sizeof trie);
    fibo[0]="1";
    text=fibo[0];
    Insert_trie(0);
    fibo[1]="1";
    text=fibo[1];
    Insert_trie(1);
    for(int i=2;i<100000;i++){
        fibo[i]=add(fibo[i-1],fibo[i-2]);
        text=fibo[i];
        Insert_trie(i);
    }
}

int Search_Trie()
{
    int node=1;
	for(int i=0;text[i];i++){
        int id=(int) (text[i]-'0');
        if(trie[node].tree[id]==-1) return -1;
        node=trie[node].tree[id];
	}
	return trie[node].complete;
}

int main()
{
    FAST
    pre_cal();
    int t;
    string num;
    cin>>t;
    for(int tc=1;tc<=t;tc++){
        cin>>text;
        cout<<"Case #"<<tc<<": "<<Search_Trie()<<endl;
    }

}
