#include<bits/stdc++.h>
using namespace std;

#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);
#define endl '\n'

typedef long long ll;
typedef pair<int,int> pii;
/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ost; // set
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_multiset; // multiset
*/

// direction array
int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};

// Bitmask

/*
bool check(int mask,int pos){return mask&(1<<pos);}
int SET(int mask,int pos){return mask|(1<<pos);}
int FLIP(int mask,int pos){return mask^(1<<pos);}
*/

struct data{
    int color,len,value;
    data(int color,int len,int value):color(color),len(len),value(value){}
};

int a[205],dp[205][205][205];

int solve(int l,int r,int k)
{
    if(l>r) return 0;
    int &res=dp[l][r][k];
    if(res!=-1) return res;
    int j=r;
    while(j>=l && a[j]==a[r]) j--;
    j++;
    res=solve(l,j-1,0)+(r-j+1+k)*(r-j+1+k);

    for(int i=l;i<j;i++){
        if(a[i]==a[r]){
            res=max(res,solve(i+1,j-1,0)+solve(l,i,r-j+1+k));
        }
    }
    return res;
}

int main()
{
    int n,t;
    cin>>t;
    for(int tc=1;tc<=t;tc++){
        cin>>n;
        for(int i=1;i<=n;i++){
            cin>>a[i];
        }
        memset(dp,-1,sizeof dp);
        printf("Case %d: %d\n",tc,solve(1,n,0));
    }
}
