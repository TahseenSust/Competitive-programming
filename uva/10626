#include<bits/stdc++.h>
using namespace std;

#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);
#define endl '\n'

typedef long long ll;
typedef pair<int,int> pii;
/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ost; // set
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_multiset; // multiset
*/

// Bitmask

/*
bool check(int mask,int pos){return mask&(1<<pos);}
int SET(int mask,int pos){return mask|(1<<pos);}
int FLIP(int mask,int pos){return mask^(1<<pos);}
*/

int total=0,c;
int dp[155][155][55];
int solve(int i,int five,int ten)
{
    if(i==0){
        return 0;
    }
    int &re=dp[i][five][ten];
    if(re!=-1) return re;
    re=1<<30;
    int one=total-(c-i)*8-five*5-ten*10;
    if(one>=8) re=min(re,8+solve(i-1,five,ten));
    if(five>=1 && one>=3) re=min(re,4+solve(i-1,five-1,ten));
    if(ten>=1 && one>=3) re=min(re,4+solve(i-1,five+1,ten-1));
    if(ten>=1) re=min(re,1+solve(i-1,five,ten-1));
    if(five>=2) re=min(re,2+solve(i-1,five-2,ten));
    return re;
}

int main()
{
    FAST
    int c,one,five,ten,t;
    cin>>t;
    while(t--){
        cin>>c>>one>>five>>ten;
        total=one+five*5+ten*10;
        memset(dp,-1,sizeof dp);
        cout<<solve(c,five,ten)<<endl;
    }
}
