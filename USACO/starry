/*
ID: tahseen1
TASK: starry
LANG: C++14
*/
#include<bits/stdc++.h>
using namespace std;

#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);
#define endl '\n'

typedef long long ll;
typedef pair<int,int> pii;
/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ost; // set
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_multiset; // multiset
*/

// direction array
int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};

int kdx[]={1,-1,0,0,1,1,-1,-1};
int kdy[]={0,0,1,-1,1,-1,1,-1};

// Bitmask

/*
bool check(int mask,int pos){return mask&(1<<pos);}
int SET(int mask,int pos){return mask|(1<<pos);}
int FLIP(int mask,int pos){return mask^(1<<pos);}
*/

bool cmp1(pii a,pii b)
{
    return a.second>b.second;
}

bool cmp2(pii a,pii b)
{
    if(a.first==b.first) return a.second<b.second;
    return a.first<b.first;
}

vector<pii>rotate90(vector<pii>cor){
    sort(cor.begin(),cor.end(),cmp1);
    int mx=cor[0].second;
    for(int i=0;i<cor.size();i++){
        swap(cor[i].first,cor[i].second);
        cor[i].first=mx-cor[i].first+1;
    }
    sort(cor.begin(),cor.end(),cmp2);
    return cor;
}

vector<pii>rotate180(vector<pii>cor){
    cor=rotate90(cor);
    cor=rotate90(cor);
    return cor;
}

vector<pii>rotate270(vector<pii>cor){
    cor=rotate90(cor);
    cor=rotate90(cor);
    cor=rotate90(cor);
    return cor;
}

vector<pii>mirror1(vector<pii>cor){
    sort(cor.begin(),cor.end(),cmp1);
    int mx=cor[0].second;
    sort(cor.begin(),cor.end(),cmp2);
    for(int i=0;i<cor.size();i++){
        cor[i].second=mx-cor[i].second+1;
    }
    sort(cor.begin(),cor.end(),cmp2);
    return cor;
}

vector<pii>mirror2(vector<pii>cor){
    sort(cor.begin(),cor.end(),cmp1);
    int mx=cor[cor.size()].first;
    sort(cor.begin(),cor.end(),cmp2);
    for(int i=0;i<cor.size();i++){
        cor[i].first=mx-cor[i].first+1;
    }
    sort(cor.begin(),cor.end(),cmp2);
    return cor;
}

string str[100];
bool vis[105][105];
int n,m,sz=0;
vector<pii>cor[600];
vector<pii>real_cor[600];
int curx,cury;

void dfs(int x,int y)
{
    vis[x][y]=1;
    cor[sz].push_back({x,y});
    real_cor[sz].push_back({x,y});
    for(int i=0;i<8;i++){
        int tx=x+kdx[i];
        int ty=y+kdy[i];
        if(ty<0 || tx<0 || tx>=n || ty>=m || vis[tx][ty] || str[tx][ty]=='0') continue;
        dfs(tx,ty);
    }
}

int main()
{
    freopen("starry.in","r",stdin);
    freopen("starry.out","w",stdout);
    //freopen("out.txt","w",stdout);

    cin>>n>>m;
    swap(n,m);
    for(int i=0;i<n;i++){
        cin>>str[i];
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(vis[i][j]==false && str[i][j]=='1'){
                curx=i,cury=j;
                dfs(i,j);
                sz++;
            }
        }
    }

    for(int i=0;i<sz;i++){
        int mnx=105,mny=105;
        for(auto cur:cor[i]){
            mnx=min(mnx,cur.first);
            mny=min(mny,cur.second);
        }
        for(auto cur:cor[i]){
            cur.first=cur.first-mnx+1;;
            cur.second=cur.second-mny+1;;
            //cout<<cur.first<<' '<<cur.second<<endl;
        }
        for(int j=0;j<cor[i].size();j++){
            cor[i][j].first=cor[i][j].first-mnx+1;
            cor[i][j].second=cor[i][j].second-mny+1;

        }
        sort(cor[i].begin(),cor[i].end(),cmp2);
    }

    int cnt=0;
    bool flag[600]={0};
    char boom[600]={0};
    char ch='a';
    for(int i=0;i<sz;i++)
    {
        if(flag[i]==false){
            boom[i]=ch++;
            cnt++;
            for(int j=i+1;j<sz;j++) if(flag[j]==false)
            {
                vector<pii>tmp=cor[i];
                if(cor[i]==cor[j]){
                    flag[j]=1;
                    boom[j]=boom[i];
                    //cout<<i<<' '<<j<<endl;
                }else if(cor[j]==mirror1(cor[i])){
                    flag[j]=1;
                    boom[j]=boom[i];
                    //cout<<i<<' '<<j<<endl;
                }else if(cor[j]==mirror2(cor[i])){
                    flag[j]=1;
                    boom[j]=boom[i];
                }else if(cor[j]==rotate90(cor[i])){
                    flag[j]=1;
                    boom[j]=boom[i];
                }else if(cor[j]==mirror1(rotate90(cor[i]))){
                    flag[j]=1;
                    boom[j]=boom[i];
                }else if(cor[j]==mirror2(rotate90(cor[i]))){
                    flag[j]=1;
                    boom[j]=boom[i];
                }else if(cor[j]==rotate180(cor[i])){
                    flag[j]=1;
                    boom[j]=boom[i];
                }else if(cor[j]==mirror1(rotate180(cor[i]))){
                    flag[j]=1;
                    boom[j]=boom[i];
                }else if(cor[j]==mirror2(rotate180(cor[i]))){
                    flag[j]=1;
                    boom[j]=boom[i];
                }else if(cor[j]==rotate270(cor[i])){
                    flag[j]=1;
                    boom[j]=boom[i];
                }else if(cor[j]==mirror1(rotate270(cor[i]))){
                    flag[j]=1;
                    boom[j]=boom[i];
                }else if(cor[j]==mirror2(rotate270(cor[i]))){
                    flag[j]=1;
                    boom[j]=boom[i];
                }
            }
        }
    }


    for(int i=0;i<sz;i++){
        for(auto cur:real_cor[i]){
            str[cur.first][cur.second]=boom[i];
        }
    }
    for(int i=0;i<n;i++){
        cout<<str[i];
        cout<<endl;
    }

}
