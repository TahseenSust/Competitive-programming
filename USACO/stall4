/*
ID: tahseen1
TASK: stall4
LANG: C++14
*/


#include <bits/stdc++.h>
using namespace std;



ofstream fout ("stall4.out");
ifstream fin ("stall4.in");

typedef long long ll;
const ll INF=(1<<28);
int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};

int capacity[505][505];
vector<int>G[505];
int n,m;

int bfs(int s,int t,vector<int>&parent)
{
	fill(parent.begin(),parent.end(),-1);
	parent[s]=-2;
	queue<pair<int,int>>Q;
	Q.push({s,INF});

	while(!Q.empty()){
		int cur=Q.front().first;
		int flow=Q.front().second;
		Q.pop();

		for(int i=0;i<G[cur].size();i++){
			int v=G[cur][i];
			//cout<<cur<<' '<<v<<' '<<parent[v]<<endl;
			if(parent[v]==-1 && capacity[cur][v]){
				parent[v]=cur;
				
				flow=min(flow,capacity[cur][v]);
				if(v==t){
					return flow;
				}
				Q.push({v,flow});
			}
		}
	}
	return 0;
}

int maxflow(int s,int t)
{
	int flow=0;
	vector<int>parent(n+m+5);
	int new_flow;
	while(new_flow=bfs(s,t,parent)){
		flow+=new_flow;
		int cur=t;
		while(cur!=s){
			int pre=parent[cur];
			capacity[pre][cur]-=new_flow;
			capacity[cur][pre]+=new_flow;
			cur=pre;
		}
	}
	return flow;
}



int main()
{
	int u,v,w;

	fin>>n>>m;
	for(int i=1;i<=n;i++){
		fin>>w;
		u=i;
		while(w--){
			fin>>v;
			v=v+n;
			G[u].push_back(v);
			G[v].push_back(u);
			capacity[u][v]=1;
		}
		
	}
	
	for(int i=1;i<=n;i++){
		G[0].push_back(i);
		G[i].push_back(0);
		capacity[0][i]=1;
	}
	for(int i=n+1;i<=n+m;i++){
		G[i].push_back(n+m+1);
		G[n+m+1].push_back(i);
		capacity[i][n+m+1]=1;
	}

	fout<<maxflow(0,n+m+1)<<endl;
 	
 	
}
