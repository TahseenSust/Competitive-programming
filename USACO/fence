/*
ID: tahseen1
TASK: fence
LANG: C++14
*/


#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int INF=10000000;

ofstream fout ("fence.out");
ifstream fin ("fence.in");

int G[550][550];
int edge[550];
int node;

int dfs(int u,bool visited[])
{
    int cnt=1;
    visited[u]=1;
    for(int i=1;i<=node;i++){
        if(G[u][i] && visited[i]==0){
            cnt+=dfs(i,visited);
        }
    }
    return cnt;
}


void remove_edge(int u,int v)
{
    G[u][v]--;
    G[v][u]--;
}

void add_edge(int u,int v)
{
    G[u][v]++;
    G[v][u]++;
}

bool valid(int u,int v)
{
    int cnt=0;
    for(int i=1;i<=node;i++){
        if(G[u][i]){
            cnt++;
        }
    }
    if(cnt==1) return 1;// v is only adjacent

    int count1=0,count2=0;

    bool visited[node+5]={0};
    // count reachable nodes
    count1=dfs(u,visited);
    remove_edge(u,v);
    memset(visited,false,sizeof visited);
    count2=dfs(v,visited);
    add_edge(u,v);
    return (count1>count2)?false:true;
}


void eulerpath(int u)
{
    fout<<u<<endl;
    for(int i=1;i<=node;i++){
        if(G[u][i] && valid(u,i)){ // see if u-v if is bridge
            remove_edge(u,i);
            eulerpath(i);
        }

    }

}


void printpath()
{
    for(int i=1;i<=node;i++){
        if(edge[i]&1){
            eulerpath(i);
            return;
        }
    }

    eulerpath(1);
}


int main()
{
    int m,u,v;
    node=500;
    fin>>m;
    while(m--){
        fin>>u>>v;
        G[u][v]++;
        G[v][u]++;
        edge[u]++;
        edge[v]++;
    }
    printpath();
}


